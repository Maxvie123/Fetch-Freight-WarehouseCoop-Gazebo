<launch>

  <arg name="robot_name"/>
  <arg name="type" />
  <arg name="x" default="0.0" />
  <arg name="y" default="0.0" />
  <arg name="z" default="0.0" />
  <arg name="yaw" default="0.0" />
  <arg name="color" default="Gray"/>

  <!-- urdf file for fetch robot -->
  <!-- <param name="robot_description" command="$(find xacro)/xacro.py $(find fetch_gazebo)/robots/fetch.gazebo.xacro" /> -->
  <param name="robot_description" command="$(find xacro)/xacro $(find warehousetest)/robots/fetch.gazebo.xacro color:=$(arg color)" />
  <param name="robot_name" type="str" value="$(arg robot_name)" />
  <param name="type" type="str" value="$(arg type)" />

  <!-- Load controller configurations from YAML file to parameter server -->
  <rosparam command="load"
            file="$(find warehousetest)/config/fetch_controllers.yaml"/>  
  
  <!-- URDF and TF support -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" >
    <param name="publish_frequency" value="50.0"/>
  </node>

  <!-- Put a robot in gazebo, make it look pretty -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
        args="-urdf -x $(arg x) -y $(arg y) -z $(arg z) -Y $(arg yaw) -model $(arg robot_name) -param robot_description"/> 

  <!-- spawn controllers -->        
  <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" 
        args="base_controller torso_lift_controller arm_controller head_controller joint_state_controller r_gripper_finger_controller l_gripper_finger_controller bellows_controller"/>
  <!-- pose initialization -->
  <node name="prepare_robot" pkg="warehousetest" type="prepare_robot_fetch.py"/>

  <!-- publish odometry message and tf -->
  <node name="odom_pub" pkg="warehousetest" type="robot_odom_pub.py" />

  <!-- add a cmd_vel muxer that takes multiple input sources -->
  <node pkg="topic_tools" type="mux" name="cmd_vel_mux" respawn="true" args="base_controller/cmd_vel cmd_vel teleop/cmd_vel">
    <remap from="mux" to="cmd_vel_mux" />
  </node>



  <!-- Add MoveIt! functions -->
  <!-- Load the SRDF and other .yaml configuration files on the param server -->
  <include file="$(find myfetch_moveit_config)/launch/planning_context_local.launch">
  </include>

  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <param name="use_gui" value="false"/>
    <rosparam param="source_list">[joint_states]</rosparam>
  </node>

  <!-- Run the main MoveIt! executable without trajectory execution (we do not have controllers configured by default) -->
  <include file="$(find myfetch_moveit_config)/launch/move_group.launch">
  </include>

<!-- Run Rviz and load the default config to see the state of the move_group node -->
<!--   <include file="$(find myfetch_moveit_config)/launch/moveit_rviz.launch">
    <arg name="rviz_config" value="$(find myfetch_moveit_config)/launch/moveit.rviz"/>
  </include> -->



</launch>